{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeatureMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","LANGUAGE","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","origial_title","year","Date","first_air_date","getFullYear","genres","i","push","name","genresNames","join","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","number_of_seasons","href","id","black","App","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomNumber","floor","random","movie","movieInfo","console","log","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c29dd00a.chunk.js","sourcesContent":["const API_KEY = \"a6eee9bfcf9cec28bc5ec991aa223c5c\";\r\nconst URL_BASE = \"https://api.themoviedb.org/3\";\r\nconst LANGUAGE = \"pt-BR\";\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${URL_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais da Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=${LANGUAGE}&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendado para você',\r\n                items: await basicFetch(`/trending/all/week?language=${LANGUAGE}&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em alta',\r\n                items: await basicFetch(`/movie/top_rated?language=${LANGUAGE}&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=${LANGUAGE}&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=${LANGUAGE}&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=${LANGUAGE}&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=${LANGUAGE}&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=${LANGUAGE}&api_key=${API_KEY}`)\r\n            },\r\n        ]\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if (movieId) {\r\n            switch (type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=${LANGUAGE}&api_key=${API_KEY}`)\r\n                break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=${LANGUAGE}&api_key=${API_KEY}`)\r\n                break;\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport './MovieRow.css';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\n\r\nexport default ({ title, items }) => {\r\n\r\n    const [scrollX, setScrollX] = useState(0);\r\n\r\n    function handleLeftClick() {\r\n        let x = scrollX + Math.round(window.innerWidth / 2 ); // cada scroll pega metade da tela do usuario\r\n\r\n        if(x > 0) {\r\n            x = 0;\r\n        }\r\n\r\n        setScrollX(x);\r\n    }\r\n\r\n    function handleRightClick() {\r\n        let x = scrollX - Math.round(window.innerWidth / 2 );\r\n        let listW = items.results.length * 150;\r\n\r\n        if ((window.innerWidth - listW) > x) {\r\n            x = ( window.innerWidth - listW ) - 60;\r\n        }\r\n\r\n        setScrollX(x);\r\n    }\r\n\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftClick}>\r\n                <NavigateBeforeIcon style={{ fontSize: 50 }} />\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightClick}>\r\n                <NavigateNextIcon style={{ fontSize: 50 }} />\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div className=\"movieRow--item\" key={key}>\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.origial_title} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './FeatureMovie.css';\r\n\r\n\r\nexport default ({ item }) => {\r\n\r\n    let date = new Date(item.first_air_date);\r\n    let year = date.getFullYear();\r\n\r\n    let genres = [];\r\n\r\n    for (let i in item.genres) {\r\n        genres.push(item.genres[i].name);\r\n    }\r\n\r\n    let genresNames = genres.join(', ');\r\n\r\n    let description = item.overview;\r\n\r\n    if (description.length > 300) {\r\n        description = description.substring(0, 300) + '...';\r\n    }\r\n\r\n    return (\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n        }}>\r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">{item.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                        <div className=\"featured--year\">{year}</div>\r\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n                    </div>\r\n                    <div className=\"featured--description\">{description}</div>\r\n                    <div className=\"featured--buttons\">\r\n                        <a href={`watch/${item.id}`} className=\"featured--watchbutton\">► Assistir</a>\r\n                        <a href={`list/add/${item.id}`} className=\"featured--mylistbutton\">+ Minha lista </a>\r\n                    </div>\r\n                    <div className=\"featured--genres\"><strong> {genresNames}</strong></div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default ({black}) => {\r\n    return (\r\n        <header className={black ? 'header--black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/250px-Netflix_2015_logo.svg.png\" alt=\"netflix-logo\"/>\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a>\r\n                    <img src=\"https://ih0.redbubble.net/image.618427277.3222/flat,1000x1000,075,f.u2.jpg\" alt=\"user-image\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )\r\n}","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeatureMovie from './components/FeatureMovie';\nimport Header from './components/Header';\n\nfunction App() {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      //Pegar toda a lista\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //Pegar o featured movie\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomNumber = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let movie = originals[0].items.results[randomNumber];\n      let movieInfo = await Tmdb.getMovieInfo(movie.id, 'tv');\n      console.log(movieInfo);\n      setFeaturedData(movieInfo);\n    }\n\n    loadAll();\n\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 30) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener)\n    }\n  }, [])\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData &&\n        <FeatureMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, index) => (\n          <MovieRow key={index} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        Feito por Renan Rodrigues <br />\n        Direitos de imagem para Netflix <br />\n        Dados obtidos atráves da API do site Themoviedb.org\n      </footer>\n\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\" />\n        </div>\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}